import React, { useContext } from 'react'
import { ApiDataContext } from '../../src/context/apiData'
import { withStyles, makeStyles } from '@material-ui/core/styles'
import {
  Button,
  IconButton,
  Badge,
  Tooltip,
  Divider,
  Box,
  List,
  ListSubheader,
  ListItemButton,
  ListItemAvatar,
  Avatar,
  ListItem,
} from '@material-ui/core'
import Menu from '@material-ui/core/Menu'
import MenuItem from '@material-ui/core/MenuItem'
import ListItemIcon from '@material-ui/core/ListItemIcon'
import ListItemText from '@material-ui/core/ListItemText'
import InboxIcon from '@material-ui/icons/MoveToInbox'
import DraftsIcon from '@material-ui/icons/Drafts'
import SendIcon from '@material-ui/icons/Send'
import NotificationsIcon from '@material-ui/icons/Notifications'
import { alpha, styled } from '@material-ui/core/styles'
import Popover from '@material-ui/core/Popover'
import Typography from '@material-ui/core/Typography'
import PropTypes from 'prop-types'
import DoneAllIcon from '@material-ui/icons/DoneAll'
import Container from '@material-ui/core/Container'
import CssBaseline from '@material-ui/core/CssBaseline'
import CircularProgress from '@material-ui/core/CircularProgress'

const RootStyle = styled('div')({
  flexGrow: 1,
  height: '10',
  overflow: 'hidden',
})

const messages = [
  {
    id: 1,
    primary: 'Brunch this week?',
    secondary:
      "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 2,
    primary: 'Birthday Gift',
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: '/static/images/avatar/1.jpg',
  },
  {
    id: 3,
    primary: 'Recipe to try',
    secondary:
      'I am try out this new BBQ recipe, I think this might be amazing',
    person: '/static/images/avatar/2.jpg',
  },
  {
    id: 4,
    primary: 'Yes!',
    secondary: 'I have the tickets to the ReactConf for this year.',
    person: '/static/images/avatar/3.jpg',
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary:
      'My appointment for the doctor was rescheduled for next Saturday.',
    person: '/static/images/avatar/4.jpg',
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: '/static/images/avatar/1.jpg',
  },
]

const useStyles = makeStyles(theme => ({
  root: {
    height: 10,
    width: 20,
    margin: 50,
  },
  text: {
    padding: theme.spacing(2, 2, 0),
  },
  paper: {
    paddingBottom: 50,
  },
  list: {
    marginBottom: theme.spacing(2),
  },
  subheader: {
    backgroundColor: theme.palette.background.paper,
  },
  appBar: {
    top: 'auto',
    bottom: 0,
  },
  grow: {
    flexGrow: 1,
  },
  fabButton: {
    position: 'absolute',
    zIndex: 1,
    top: -30,
    left: 0,
    right: 0,
    margin: '0 auto',
  },
  typography: {
    padding: theme.spacing(2),
  },
}))

export default function NotificationspopOver() {
  const { isLoading, adsData } = useContext(ApiDataContext)
  if (isLoading) {
    return (
      <div>
        {' '}
        <CircularProgress color="secondary" />
      </div>
    )
  }
  console.log(adsData)
  const classes = useStyles()
  const [anchorEl, setAnchorEl] = React.useState(null)
  // const anchorRef = React.useRef(null)
  const [open, setOpen] = React.useState(false)
  // const [notifications, setNotifications] = React.useState(NOTIFICATIONS)
  // const totalUnRead = notifications.filter(
  //   item => item.isUnRead === true
  // ).length

  const handleOpen = event => {
    setAnchorEl(event.currentTarget)
    setOpen(true)
  }

  const handleClose = () => {
    setOpen(false)
    setAnchorEl(null)
  }

  // const handleMarkAllAsRead = () => {
  //   setNotifications(
  //     notifications.map(notification => ({
  //       ...notification,
  //       isUnRead: false,
  //     }))
  //   )
  // }

  return (
    <div>
      <IconButton
        aria-controls="customized-menu"
        aria-haspopup="true"
        variant="contained"
        size="large"
        color={open ? 'primary' : 'secondary'}
        onClick={handleOpen}
        sx={{
          ...(open && {
            bgcolor: theme =>
              alpha(
                theme.palette.primary.main,
                theme.palette.action.focusOpacity
              ),
          }),
        }}
      >
        <Badge badgeContent={2} color="error">
          <NotificationsIcon />
        </Badge>
      </IconButton>

      <Popover
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'center',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
      >
        <CssBaseline />
        <Container maxWidth="sm">
          <Box sx={{ display: 'flex', alignItems: 'center', py: 2, px: 2.5 }}>
            <Box sx={{ flexGrow: 1 }}>
              <Typography variant="subtitle1">Notifications</Typography>
              <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                You have {2} unread messages
              </Typography>
            </Box>

            {/* {totalUnRead > 0 && (
            <Tooltip title=" Mark all as read">
              <IconButton color="primary" onClick={handleMarkAllAsRead}>
                <DoneAllIcon />
              </IconButton>
            </Tooltip>
          )} */}
          </Box>

          <Divider />

          <Box>
            <List>
              {adsData.map(item => (
                <React.Fragment key={item.id}>
                  {item.id === 1 && (
                    <ListSubheader className={classes.subheader}>
                      Today
                    </ListSubheader>
                  )}
                  {item.id === 3 && (
                    <ListSubheader className={classes.subheader}>
                      Yesterday
                    </ListSubheader>
                  )}
                  <ListItem button>
                    <ListItemAvatar>
                      <Avatar alt="Profile Picture" src={item.image} />
                    </ListItemAvatar>
                    <ListItemText
                      primary={item.ad_type}
                      secondary={item.text}
                    />
                  </ListItem>
                </React.Fragment>
              ))}
            </List>
          </Box>
        </Container>
      </Popover>
    </div>
  )
}
